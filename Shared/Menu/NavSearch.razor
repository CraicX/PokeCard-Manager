@using PokeCardManager.Classes
@using PokeCardManager.Data
@using System.Net
@using Serilog
@using Microsoft.JSInterop

@implements IDisposable

@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="topbar d-flex align-items-center">
    <nav class="navbar navbar-expand gap-3">

        <div class="position-relative search-bar d-sm-flex flex-nowrap">

          @*  <input type="text" class="form-control-sm px-5" spellcheck="false" placeholder="Search" id="cardSearch" @bind="searchQuery" @onkeyup="(args) => CheckSearchKeys(args)"> *@
            <span class="input-group-text search-icon"><i class="bx bx-search"></i></span>

                <BlazoredTypeahead id="cardSearch" class="form-control-sm"
                    @bind-Values="_selectedHints"
                    SearchMethod="SearchHints"
                    EnableDropDown="true"
                    MinimumLength="2"
                    Debounce="100"
                    AddItemOnEmptyResultMethod="ItemAddedMethod"
                    Value="selectedResult"
                    ValueExpression="@(() => selectedResult)"
                    placeholder="Pokemon or Search Term..."
                    @ref="_localTypeahead" >

                    <SelectedTemplate Context="context">
                        @context
                    </SelectedTemplate>
                    
                    <ResultTemplate Context="context">
                        @context
                    </ResultTemplate>
                </BlazoredTypeahead>
         
        </div>
        <div class="top-menu ms-auto">
            <ul class="navbar-nav align-items-center gap-1">
                <li class="nav-item mobile-search-icon d-flex d-lg-none">
                    <a class="nav-link">
                        <i class='bx bx-search'></i>
                    </a>
                </li>

                <li class="nav-item @currentTheme d-none d-sm-flex">
                    <a id="iconTheme" class="nav-link dark-mode-icon" @onclick="SetTheme">
                        <i id="themeIcon" class='bx @currentThemeIcon' />
                    </a>
                </li>

                <li class="nav-item @currentTheme d-none d-sm-flex">
                    <a data-bs-toggle="modal" data-bs-target="#openSettings" class="nav-link dark-mode-icon">
                        <i class='bx bx-cog' />
                    </a>
                </li>
            </ul>
        </div>
    </nav>
</div>




@code {

    private IJSObjectReference module;
    private DotNetObjectReference<NavSearch> objRef;

    private List<string> HintsList = new();
    public IList<string> _selectedHints;
    public IList<string> _selectedHintsNotFound;

    private BlazoredTypeahead<string, string> _localTypeahead;

    private string selectedResult;

    public string currentTheme { get; set; } = Config.Settings.Theme;

    string currentThemeIcon => currentTheme == "light-theme" ? "bx-sun" : "bx-moon";

    private string query = "";

    private string searchQuery {
        get
        {
            return query;
        }
        set { query = value.Trim(); }
    }

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    private async Task<IEnumerable<string>> SearchHints(string searchText)
    {
        if (HintsList.Count == 0)
        {
            HintsList.AddRange(Utils.ReadResource("PokemonList.txt").Split(Environment.NewLine));
        }    

        return await Task.FromResult(HintsList.Where(x => x.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private Task<string> ItemAddedMethod(string searchText)
    {
        return Task.FromResult(searchText);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/Shared/Menu/NavSearch.razor.js");

            await module.InvokeVoidAsync("setTheme", Config.Settings.Theme);
            await module.InvokeVoidAsync("initSearch", objRef);

        }
    }



    private void CheckSearchKeys( KeyboardEventArgs args )
    {
        PokeAPI.Query = query;

        //  Check if Enter key was pressed
        if (args.Key == "Enter" && query != "")
        {
            ExecuteSearch(query);
        }
    }

    public void ExecuteSearch(string query)
    {
        // if (query == "" && PC.Filters.Count == 0) return;

        // PokeAPI.Query = query;

        int queryHash = Utils.GetListHashCode(PC.Filters) + PokeAPI.QueryList.GetHashCode() + DateTime.Now.Second;
        int timeX     = DateTime.Now.Second;

        Navigation.NavigateTo($"/search/{queryHash}", false, false);
    }


    private async Task SetTheme()
    {
        currentTheme = (currentTheme == "light-theme" ? "dark-theme" : "light-theme");

        await module.InvokeVoidAsync("setTheme", currentTheme);

        Config.Settings.Theme = currentTheme;

        Config.Settings.Save();
    }

    [JSInvokable]
    public Task<string> UpdatedQuery()
    {
        PokeAPI.QueryList.Clear();
        
        foreach (var value in _selectedHints)
        {
            PokeAPI.QueryList.Add(value);
        }

        //int queryHash = Utils.GetListHashCode(PC.Filters) + PokeAPI.Query.GetHashCode() + DateTime.Now.Second;
        int queryHash = Utils.GetListHashCode(PC.Filters) + PokeAPI.QueryList.GetHashCode() + DateTime.Now.Second;
        int timeX = DateTime.Now.Second;

        Navigation.NavigateTo($"/search/{queryHash}", false, false);

        return Task.FromResult("");
    }

    public override void Dispose()
    {
        objRef?.Dispose();
    }


}

