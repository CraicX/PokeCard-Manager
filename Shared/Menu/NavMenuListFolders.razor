@using PokeCardManager.Classes
@using PokeCardManager.Classes.Events
@using PokeCardManager.Data
@inherits ComponentBase
@implements IDisposable
@inject AddFolderEvent AddFolderEvent
@inject IJSRuntime JS


@foreach (var pair in PC.FolderTypes)
{
    @if (!FoldersByType.ContainsKey(pair.Key)) continue;
    
    <li class="dropdown-divider"></li>
    <li class="dropdown-header folderTitle" data-foldertype="@pair.Key">[ <span class="ui-droppable">@pair.Value</span> ]</li>
    <ul data-foldertype="@pair.Key">

    @foreach( var folder in FoldersByType[pair.Key] ) {
        <li class="pokeFolder" data-foldertype="@folder.folderType"><div class="dropzone"></div><a href="javascript:;" class="ui-droppable"><i class='bx bx-folder'></i>@folder.name</a></li>
    }
    </ul>


}



@code {
    private IJSObjectReference module;
    public Dictionary<string, List<FolderData>> FoldersByType = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/Shared/Menu/NavMenuListFolders.razor.js");

            await module.InvokeVoidAsync("initFolderDrop");
        }
    }
    protected override void OnInitialized()
    {
        foreach (var folder in PC.Folders)
        {
            if (!FoldersByType.ContainsKey(folder.folderType))
            {
                FoldersByType.Add(folder.folderType, new List<FolderData>());
            }

            FoldersByType[ folder.folderType ].Add(folder);

        }

        AddFolderEvent.OnChange += SChanged;
    }

    public void SChanged()
    {
        FoldersByType.Clear();

        foreach (var folder in PC.Folders)
        {
            if (!FoldersByType.ContainsKey(folder.folderType))
            {
                FoldersByType.Add(folder.folderType, new List<FolderData>());
            }

            FoldersByType[folder.folderType].Add(folder);

        }

    }

    public void Dispose()
    {
        AddFolderEvent.OnChange -= SChanged;
    }

}