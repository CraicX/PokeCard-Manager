@using PokeCardManager.Classes
@using PokeCardManager.Classes.Events
@using PokeCardManager.Data
@using Microsoft.JSInterop
@using System.Text.Json

@inherits ComponentBase
@implements IDisposable
@inject AddFolderEvent AddFolderEvent
@inject IJSRuntime JS


@foreach (var folderType in PC.FolderTypes)
{
    @if (!FoldersByType.ContainsKey(folderType.Name)) continue;
    string folderTypeIcon  = folderType.Collapsed ? "bx-plus" : "bx-minus";
    string folderTypeClass = folderType.Collapsed ? "display: none" : "";

    <li class="dropdown-divider"></li>
    <li class="dropdown-header folderTitle pb-1" data-folder-type="@folderType.Name" @onclick="@(e => ToggleFolder(@folderType.Name))">
        <i class="bx @folderTypeIcon" data-folder-type="@folderType.Name" /> [ <span class="ui-droppable">@folderType.Title</span> ]
    </li>
    <ul data-folder-type="@folderType.Name" class="folderGroup" style="@folderTypeClass">

        @foreach (var folder in FoldersByType[folderType.Name])
        {
            <li class="pokeFolder" data-folder-type="@folder.folderType" data-sort-index="@folder.sortIndex" data-parent-id="@folder.parentId" data-folder-id="@folder.id">
                <div class="dropzone">
                    <a class="ui-droppable">
                       <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" class="pf" fill="@folder.color">
                           <path d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h240l80 80h320q33 0 56.5 23.5T880-640v400q0 33-23.5 56.5T800-160H160Z" stroke="#FAFAFA"/>
                       </svg> 
                        @folder.name
                    </a>
                </div>
            </li>
        }
    </ul>
}




@code {
    private static IJSObjectReference module;

    public static Dictionary<string, List<FolderData>> FoldersByType
    {
        get;
        set;
    } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/Shared/Menu/NavMenuListFolders.razor.js");

            await module.InvokeVoidAsync("initFolderSort");
        }

        await module.InvokeVoidAsync("runFolderSort");
    }


    protected override void OnInitialized()
    {
        SChanged();


        AddFolderEvent.OnChange += SChanged;
    }


    [JSInvokable]
    public static Task<string> FolderSorted(string sortInfo)
    {
        //  convert sortInfo json to FolderSort object

        FolderSort folderSortInfo = JsonSerializer.Deserialize<FolderSort>(sortInfo);

        PC.SortFolder(folderSortInfo);

        return Task.FromResult("");
    }

    public void ToggleFolder(string folderName)
    {
        module.InvokeVoidAsync("toggleFolder", folderName);
        
        for(int i = 0; i < PC.FolderTypes.Count; i++)
        {
            if (PC.FolderTypes[i].Name == folderName)
            {
                PC.FolderTypes[i].Collapsed = !PC.FolderTypes[i].Collapsed;
                break;
            }
        }
    }

    [JSInvokable]
    public static Task<string> FolderGroupCollapsed(string folderType, bool collapsed)
    {
        return Task.FromResult("");
    }

    public void SChanged()
    {
        FoldersByType.Clear();

        foreach (var folder in PC.Folders)
        {
            if (!FoldersByType.ContainsKey(folder.folderType))
            {
                FoldersByType.Add(folder.folderType, new List<FolderData>());
            }

            FoldersByType[folder.folderType].Add(folder);

        }

        StateHasChanged();

    }


    public void Dispose()
    {
        AddFolderEvent.OnChange -= SChanged;

        module.InvokeVoidAsync("disableFolderSort");
    }

}