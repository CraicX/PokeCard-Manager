@using PokeCardManager.Classes
@using PokeCardManager.Classes.Events
@using PokeCardManager.Data
@using Microsoft.JSInterop
@using System.Text.Json

@inherits ComponentBase
@implements IDisposable
@inject AddFolderEvent AddFolderEvent
@inject IJSRuntime JS


@foreach (var pair in PC.FolderTypes)
{
    @if (!FoldersByType.ContainsKey(pair.Key)) continue;
    
    <li class="dropdown-divider"></li>
    <li class="dropdown-header folderTitle" data-folder-type="@pair.Key">[ <span class="ui-droppable">@pair.Value</span> ]</li>
    <ul data-foldertype="@pair.Key" class="folderGroup">

    @foreach( var folder in FoldersByType[pair.Key] ) {
        <li class="pokeFolder" data-folder-type="@folder.folderType" data-sort-index="@folder.sortIndex" data-parent-id="@folder.parentId" data-folder-id="@folder.id">
            <div class="dropzone">
                <a href="javascript:;" class="ui-droppable"><i class='bx bx-folder'></i>@folder.name</a>
            </div>
        </li>
    }
    </ul>
}




@code {
    private IJSObjectReference module;

    public Dictionary<string, List<FolderData>> FoldersByType
    {
        get;
        set;
    } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/Shared/Menu/NavMenuListFolders.razor.js");

            await module.InvokeVoidAsync("initFolderSort");
        }

        await module.InvokeVoidAsync("runFolderSort");
    }


    protected override void OnInitialized()
    {
        SChanged();


        AddFolderEvent.OnChange += SChanged;
    }


    [JSInvokable]
    public static Task<string> FolderSorted(string sortInfo)
    {
        //  convert sortInfo json to FolderSort object

        FolderSort folderSortInfo = JsonSerializer.Deserialize<FolderSort>(sortInfo);

        PC.SortFolder(folderSortInfo);

        return Task.FromResult("");
    }


    public void SChanged()
    {
        FoldersByType.Clear();

        foreach (var folder in PC.Folders)
        {
            if (!FoldersByType.ContainsKey(folder.folderType))
            {
                FoldersByType.Add(folder.folderType, new List<FolderData>());
            }

            FoldersByType[folder.folderType].Add(folder);

        }

        StateHasChanged();

    }


    public void Dispose()
    {
        AddFolderEvent.OnChange -= SChanged;

        module.InvokeVoidAsync("disableFolderSort");
    }

}