@page "/search"
@page "/search/{QueryHash?}"

@using System.Net
@using System.Threading;

@inherits LayoutComponentBase
@implements IDisposable

@namespace PokeCardManager.Pages
@layout MainLayout

@inject NavigationManager NavManager
@inject IJSRuntime JS

<div class="card radius-10 m-0 p-0">
    <div class="card-body">
        <div class="d-flex align-items-center">
            <div>
                <span class="mb-0 pe-3 text-secondary" id="searchText"></span>
            </div>
        </div>
    </div>
</div>
<div id="search-container">
    <div class="poke-card-container p-1" id="pcc-search">

        <InfiniteScroll ObserverTargetId="searchSpinner" ObservableTargetReached="(e) => GetCards()">
            @foreach (CardX card in Cards)
            {
                <PokeCard card="@card" />
            }
            <div class="spinner-grow me-3 ps-3" role="status" id="searchSpinner">
                
            </div>
        </InfiniteScroll>

    </div>
</div>

<div class="clearfix p-5"></div>

@code {
    [Parameter]
    public string QueryHash { get; set; }
    public string LastHash { get; set; }     = "";
    public int PageNumber { get; set; }      = 0;
    public string TotalResults { get; set; } = "";
    public List<CardX> Cards { get; set; }   = new List<CardX>();
    private CancellationTokenSource cts;

    private IJSObjectReference module;

    private List<CardX> Results = null;

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        Cards.Clear();
        PageNumber = 0;
        if (module != null) module.InvokeVoidAsync("showSearching");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/Pages/Search.razor.js");
        }

        if (Config.Settings.AddCardEffects.ToLower() == "true") { await module.InvokeVoidAsync("initCardEffects"); }
        else { await module.InvokeVoidAsync("addCardClick"); }
    }


    protected async Task<IEnumerable<CardX>> GetCards()
    {
        cts = new(new TimeSpan(0,0,30));

        List<CardX> NewCards = new();

        if (QueryHash != LastHash)
        {
            LastHash   = QueryHash;
            PageNumber = 0;
        }

        if (++PageNumber > 1)
        {
            if (Math.Ceiling((decimal)PokeAPI.ResultSet.TotalCount / Config.Settings.PerPage) < PageNumber)
            {
                await module.InvokeVoidAsync("hideSearching");
                return NewCards;
            }
        }

        PokeAPI.PageNumber = PageNumber;

        NewCards = await PokeAPI.CardSearch(cts.Token);

        // await module.InvokeVoidAsync("initCardEffects");

        if (NewCards.Count == 0)
        {
            await module.InvokeVoidAsync("hideSearching");
            return NewCards;
        }

        Cards.AddRange(NewCards);

        if (Cards.Count >= PokeAPI.ResultSet.TotalCount)
        {
            await module.InvokeVoidAsync("hideSearching");
        }


        if (Config.Settings.AddCardEffects.ToLower() == "true") await module.InvokeVoidAsync("initCardEffects");
        else await module.InvokeVoidAsync("addCardClick");

        await module.InvokeVoidAsync("updateResultCount", PokeAPI.ResultSet.TotalCount);


        cts.TryReset();
        return NewCards;
    }

    public void Dispose()
    {
        if (cts != null) {
            cts.Cancel();
            cts.Dispose();
        }
        
    }
}